
package com.mycompany.remotedbconnection;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import org.json.JSONArray;
import org.json.JSONObject;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Vector;
import javax.swing.SwingUtilities;

/**
 *
 * @author makoal
 */
public class GUICPanel extends javax.swing.JFrame {
    private final String apiUrl = "https://yourdomain/PHP_API_File.php"; // your PHP API URL
    private final String apiKey = "createstrongkey"; // same as in your PHP API
    private volatile boolean running = false; //
    //declaration of sql connection variables
    private Statement ps, ps1, ps2, ps3, ps4, ps5, ps6, ps7;
    private Connection con = null;
    private Connection con1 = null;
    private Connection con2 = null;
    private ResultSet rs, rs1, rs2, rs3, rs4, rs5, rs6, rs7, rs8;
    private PreparedStatement insert, insert1,insert2, insert3,
            insert4, insert5,insert6, insert17,insert8, insert9,insert10, insert11;
    int rId = 0;
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(GUICPanel.class.getName());

    /**
     * Creates new form GUICPanel
     */
    
    public GUICPanel() {
        
        initComponents();
        
        try 
        {
            SqlToCpanelSync.syncUsers();
        } 
        catch (IOException ex) 
        {
            System.getLogger(GUICPanel.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
        
        loadUsersToTable(); // load data when form opens
        loadUsersToTable1();
        
    }
    
    //generate random id numbers
    private void RandomNum()
    {
        Random rand = new Random();

        // Generate number between 100000 and 999999 (always 6 digits)
        int randomNumber = 1000000 + rand.nextInt(9000000);
        rId = randomNumber;

        System.out.println("Random 6-digit number: " + rId);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tables = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        username = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        surname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tables1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        tValue = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Tables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Username", "Surname", "Email"
            }
        ));
        jScrollPane1.setViewportView(Tables);

        jLabel1.setText("ID:");

        jLabel2.setText("Username:");

        jLabel3.setText("Surname:");

        jLabel4.setText("Email:");

        jButton1.setText("Add");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Update");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setText("sync");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        Tables1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Username", "Surname", "Email"
            }
        ));
        jScrollPane2.setViewportView(Tables1);

        jLabel5.setText("Table value:");

        tValue.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select", "users", "user1" }));

        jButton5.setText("Start ");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jButton6.setText("Stop");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        logArea.setColumns(20);
        logArea.setRows(5);
        jScrollPane4.setViewportView(logArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(email, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                    .addComponent(tValue, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(65, 65, 65)
                                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(39, 39, 39)
                                        .addComponent(surname, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(surname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        if(tValue.getSelectedItem().equals("select"))
        {
            JOptionPane.showMessageDialog(null, "Select table");
            return;
        }
        if(tValue.getSelectedItem().toString().equals("table_users"))
        {
            this.RandomNum();
            this.TestFun("add","add_data","get_data");
        }
        else
        {
            System.out.println("1");
            this.RandomNum();
            this.TestFun1("add");
        }
        this.loadUsersToTable();
        loadUsersToTable1();
        ClearFields();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        if(tValue.getSelectedItem().toString().equals("select"))
        {
            JOptionPane.showMessageDialog(null, "Seletc table");
            return;
        }
        if(tValue.getSelectedItem().toString().equals("table_users"))
        {
            this.TestFun("update","update_data","get_data");
        }
        else
        {
            this.TestFun1("update");
        }
        this.loadUsersToTable();
        loadUsersToTable1();
        ClearFields();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        if(tValue.getSelectedItem().toString().equals("select"))
        {
            JOptionPane.showMessageDialog(null, "Select table");
            return;
        }
        try 
        {
            int choice = JOptionPane.showConfirmDialog(null, "Do you want to delete this record","Warning",JOptionPane.YES_NO_OPTION);
            if(choice == JOptionPane.YES_OPTION)
            {
                    this.TestFun("delete","delete_data","get_data");
                
                    this.TestFun1("delete");
                    
                

                
            }
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error "+e);
        }
        this.loadUsersToTable();
        loadUsersToTable1();
        ClearFields();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
         // load data when form opens
        
        String syn = null;
        try 
        {
            syn = SqlToCpanelSync.syncUsers();
        } 
        catch (IOException ex) 
        {
            System.getLogger(GUICPanel.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
        
        JOptionPane.showMessageDialog(null, syn);
        loadUsersToTable();
        loadUsersToTable1();
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        this.startLoop();
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        stopLoop();
    }//GEN-LAST:event_jButton6MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new GUICPanel().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tables;
    private javax.swing.JTable Tables1;
    private javax.swing.JTextField email;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea logArea;
    private javax.swing.JTextField surname;
    private javax.swing.JComboBox<String> tValue;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
    private void loadUsersToTable() 
    {
        String apiUrl = "https://yourdomain/PHP_API_File.php?action=get_data&api_key=createstrongkey";

        try {
            URL url = new URL(apiUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder content = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                content.append(line);
            }
            in.close();
            conn.disconnect();

            //JSONArray users = new JSONArray(content.toSftring());
            JSONArray users = new JSONArray(content.toString());

            // Get table model
            DefaultTableModel model = (DefaultTableModel) Tables.getModel();
            model.setRowCount(0); // clear existing rows

            // Add rows
            for (int i = 0; i < users.length(); i++) {
                JSONObject user = users.getJSONObject(i);
                Object[] row = {
                    user.optString("id"),
                    user.optString("username"),
                    user.optString("surname"),
                    user.optString("email")
                };
                model.addRow(row);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void loadUsersToTable1() 
    {
        try 
        {
            int counter;
            
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection("jdbc:sqlserver://yourserver;Database=databasename;user=databaseusername;password=databasepassword;encrypt=true;trustServerCertificate=true;");
            insert = con.prepareStatement("select * from table_user1");
            
            ResultSet rs = insert.executeQuery();
            
            ResultSetMetaData Rs = rs.getMetaData();
            counter = Rs.getColumnCount();
            
            DefaultTableModel Df  = (DefaultTableModel)this.Tables1.getModel();
            Df.setRowCount(0);
            
            int itemCounter = 0;
            while(rs.next())
            {
                Vector v2 = new Vector();
                for(int i=0;i<=counter;i++)
                {
                    itemCounter++;
                    v2.add(rs.getInt(1));
                    v2.add(rs.getString("Username"));
                    v2.add(rs.getString("Surname"));
                    v2.add(rs.getString("EMAIL"));
                }
                Df.addRow(v2);
            }
        } 
        catch (ClassNotFoundException ex) 
        {
            JOptionPane.showMessageDialog(null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    // Method to add a new user
    private String addUser(int id, String username,String surname, String email, String act) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            
            // Prepare POST data
            String data = String.format("action="+act+"&id=%s&username=%s&surname=%s&email=%s&api_key=%s",
                    id, username, surname, email, apiKey);

            // Send data
            try (OutputStream os = conn.getOutputStream()) {
                os.write(data.getBytes());
                os.flush();
            }

            // Read response
            try (BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
                return response.toString(); // JSON response from PHP
            }

        } catch (Exception e) {
            e.printStackTrace();
            return "{\"success\":false,\"error\":\"Exception occurred\"}";
        }
    }
    
    // Method to update a user by ID
    private String updateUser(int id, String username, String surname, String email,String act) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            
            System.out.println(act);
            // Prepare POST data
            String data = String.format(
                    "action="+act+"&id=%d&username=%s&surname=%s&email=%s&api_key=%s",
                    id, username, surname, email, apiKey
            );

            // Send data
            try (OutputStream os = conn.getOutputStream()) {
                os.write(data.getBytes());
                os.flush();
            }

            // Read response
            try (BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
                System.out.println("done update");
                return response.toString(); // JSON response from PHP
            }

        } catch (Exception e) {
            e.printStackTrace();
            return "{\"success\":false,\"error\":\"Exception occurred\"}";
        }
    }
    
    //delete user function
    private boolean deleteUser(int userId, String act) {
        String apiUrl = "https://yourdomain/PHP_API_File.php";
        String apiKey = "createstrongkey"; // must match your PHP script

        try {
            URL url = new URL(apiUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

            // include the API key
            String postData = "action=delete_data&id=" + userId + "&api_key=" + apiKey;

            try (OutputStream os = conn.getOutputStream()) {
                os.write(postData.getBytes());
                os.flush();
            }

            // Read response
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                response.append(line);
            }
            in.close();
            conn.disconnect();

            System.out.println("Server response: " + response);

            // check if deletion was successful
            System.out.println("7");
            return response.toString().contains("\"success\":true");

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    private boolean deleteUser1(int userId, String act) {
        String apiUrl = "https://yourdomain/PHP_API_File.php";
        String apiKey = "createstrongkey"; // must match your PHP script

        try {
            URL url = new URL(apiUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

            // include the API key
            String postData = "action=delete_data&id=" + userId + "&api_key=" + apiKey;

            try (OutputStream os = conn.getOutputStream()) {
                os.write(postData.getBytes());
                os.flush();
            }

            // Read response
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                response.append(line);
            }
            in.close();
            conn.disconnect();

            System.out.println("Server response: " + response);

            // check if deletion was successful
            return response.toString().contains("\"success\":true");

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    private void updateSqlServer(Connection conn) throws SQLException {
        String sql = "UPDATE user1 SET username=?, surname=?, email=?, last_updated=? WHERE id=?";
        String cv = id.getText();
        int id = Integer.parseInt(cv);
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, username.getText());
            ps.setString(2, surname.getText());
            ps.setString(3, email.getText());
            ps.setTimestamp(4, new java.sql.Timestamp(System.currentTimeMillis())); // current timestamp
            ps.setInt(5, id);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Data updated successfully");
        }
    }
    private void DeleteData()
    {
        try
        {
            //creation of database
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con = DriverManager.getConnection("jdbc:sqlserver://yourserver;Database=databasename;user=databaseusername;password=databasepassword;encrypt=true;trustServerCertificate=true;");
            
            insert = con.prepareStatement("delete from table_user1 where Id = ? ");
            int ck = Integer.parseInt(this.id.getText());
            insert.setInt(1, ck);
            insert.execute();
            deleteUser(ck,"delete_data");
            JOptionPane.showMessageDialog(null, "Record deleted");
            
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error "+e);
        }
    }
    private void TestFun1(String hold)
    {
        try
        {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            con1 = DriverManager.getConnection("jdbc:sqlserver://yourserver;Database=databasename;user=databaseusername;password=databasepassword;encrypt=true;trustServerCertificate=true;");
            ps1 = con1.createStatement();
            int ids = 0;
            if(!id.getText().equals(""))
            {
                String f = id.getText();
                ids = Integer.parseInt(f);
            }
            else
            {
                ids = rId;
            }
            String str = String.valueOf(ids);
            
            rs1 = ps1.executeQuery("select * from table_user1 where id = '"+str+"'");
            
            String sx = "";
            
            while(rs1.next())
            {
                sx = "s";
            }
            if(!rs1.next() && sx.equals(""))
            {
                if(hold.equals("add"))
                {
                    this.AddMail("");
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "There is no such user for "+hold);
                    return;
                }
            }
            else
            {
                if(hold.equals("update"))
                {
                    try (Connection conn = DriverManager.getConnection(
                        "jdbc:sqlserver://yourserver;Database=databasename;user=databaseusername;password=databasepassword;encrypt=true;trustServerCertificate=true;")) 
                    {
                        updateSqlServer(conn);
                   
                    
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                else if(hold.equals("delete"))
                {
                    DeleteData();
                }
                else
                {
                    System.out.println("id already exists");
                    this.RandomNum();
                    id.setText("");
                    this.TestFun1("add");
                    //JOptionPane.showMessageDialog(null, "User already exists");
                    return;
                }
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    private void TestFun(String holder, String act, String acts)
    {
        String apiUrl = "https://lyourdomain/PHP_API_File?action="+acts+"&api_key=createstrongkey";
        
        List<String> ids = new ArrayList<>();

        try {
            URL url = new URL(apiUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder content = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                content.append(line);
            }
            in.close();
            conn.disconnect();

            JSONArray users = new JSONArray(content.toString());

            

            // Add rows
            for (int i = 0; i < users.length(); i++) {
                JSONObject user = users.getJSONObject(i);
                ids.add(user.optString("id"));
                System.out.println(ids);
            }
            int j  = 0;
            if(holder.equals("add"))
            {
                j=rId;
            }
            else
            {
                String hi = id.getText();
                j = Integer.parseInt(hi);
            }
                
            String h = "";
            int[] num= new int[9999];
            System.out.println("hhhhh");
            for(int i=0;i<ids.size();i++)
            {
                num[i] = Integer.parseInt(ids.get(i));
                System.out.println(num[i]);
                if(num[i]==j)
                {
                    System.out.println(num[i]);
                    h="gdhf";
                }
            }
            if(h.equals(""))
            {
                if(holder.equals("add"))
                {
                    //int id = Integer.parseInt(this.id.getText());
                    String response ="";
                    if(act.equals("add_data"))
                    {
                        response = addUser(j,this.username.getText(),this.surname.getText(), this.email.getText(), act);

                    }
                        
                    if(response.equals("{\"success\":true}"))
                    {
                        JOptionPane.showMessageDialog(null, "Data added successfully");
                        System.out.println("Server response: " + response);
                        //return;
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Data not added: "+response);
                        System.out.println("Server response: " + response);
                        //return;
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "User does not exit in the system");
                    return;
                }
            }
            else
            {
                if(holder.equals("add"))
                {
                    //JOptionPane.showMessageDialog(null, "User already exits");
                    this.RandomNum();
                    this.TestFun("add","add_data","get_data");
                }
                else
                {
                    
                    if(holder.equals("update"))
                    {
                        System.out.println("in for update");
                        String response = updateUser(j,this.username.getText(),this.surname.getText(), this.email.getText(),act); // update user with id=3
        
                        if(response.equals("{\"success\":true}"))
                        {
                            JOptionPane.showMessageDialog(null, "Data updated successfully");
                            System.out.println("Server response: " + response);
                            //return;
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Data not added: "+response);
                            System.out.println("Server response: " + response);
                            //return;
                        }
                    }
                    else
                    {
                        deleteUser(j,act);
                        
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void ClearFields()
    {
        this.id.setText("");
        this.surname.setText("");
        this.username.setText("");
        this.email.setText("");
    }
    
    private void startLoop() {
        if (running) return; // already running
        running = true;

        Thread loopThread = new Thread(() -> {
            int counter = 0;
            while (running) {
                counter++;
                int finalCounter = counter;
                try {
                    SqlToCpanelSync.syncUsers();
                } catch (IOException ex) {
                    System.getLogger(GUICPanel.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
                }
                loadUsersToTable();
                loadUsersToTable1();

                // update GUI safely using SwingUtilities
                SwingUtilities.invokeLater(() -> 
                    logArea.append("Loop iteration: " + finalCounter + "\n")
                );

                try {
                    Thread.sleep(1000); // sleep 1 sec to slow down
                } catch (InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
            }
        });

        loopThread.start();
    }
    private void stopLoop() {
        running = false;
        logArea.append("Loop stopped.\n");
    }
    
    
    private void AddMail(String stand) 
    {
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

            // ✅ Connect to SQL Server
            try (Connection con1 = DriverManager.getConnection(
                    "jdbc:sqlserver://yourserver;Database=databasename;user=databaseusername;password=databasepassword;encrypt=true;trustServerCertificate=true;")) {

                // ✅ Use PreparedStatement for safety
                String sql = "INSERT INTO table_user1 (id, username, surname, email, last_updated) VALUES (?, ?, ?, ?, ?)";
                try (PreparedStatement ps1 = con1.prepareStatement(sql)) {

                    int h = rId;

                    ps1.setInt(1, h);
                    ps1.setString(2, this.username.getText());
                    ps1.setString(3, this.surname.getText());
                    ps1.setString(4, this.email.getText());

                    // ✅ Use current timestamp
                    ps1.setTimestamp(5, new java.sql.Timestamp(System.currentTimeMillis()));

                    ps1.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Data added");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }

}
